name: CI/CD Pipeline

on:
  push:
    branches: [ review-2, develop ]
  pull_request:
    branches: [ review-2 ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci
      
    - name: Run backend tests
      working-directory: ./backend
      run: npm test
      
    - name: Run backend linting
      working-directory: ./backend
      run: npm run lint
      
    - name: Setup Node.js for frontend
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint
      
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/review-2' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: write
      id-token: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
          
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta.outputs.tags }}-frontend
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VITE_API_URL=/api/afisha
          VITE_CDN_URL=/content/afisha
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/review-2'
    
    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          # Останавливаем старые контейнеры
          docker-compose -f docker-compose.prod.yml down || true
          
          # Удаляем старые образы
          docker image prune -f
          
          # Логинимся в GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Создаем docker-compose.prod.yml для продакшена
          cat > docker-compose.prod.yml << 'EOF'
          version: '3.8'
          
          services:
            frontend:
              image: ghcr.io/${{ github.repository }}-frontend:review-2-frontend
              ports:
                - "80:80"
              depends_on:
                - backend
              networks:
                - app-network
          
            backend:
              image: ghcr.io/${{ github.repository }}:review-2
              environment:
                - DATABASE_DRIVER=postgres
                - DATABASE_HOST=database
                - DATABASE_PORT=5432
                - DATABASE_USERNAME=postgres
                - DATABASE_PASSWORD=${{ secrets.DB_PASSWORD }}
                - DATABASE_NAME=films
                - DATABASE_LOGGING=true
                - LOGGER_TYPE=json
              depends_on:
                - database
              networks:
                - app-network
          
            database:
              image: postgres:15-alpine
              environment:
                - POSTGRES_DB=films
                - POSTGRES_USER=postgres
                - POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}
              volumes:
                - postgres_data:/var/lib/postgresql/data
              networks:
                - app-network
          
            pgadmin:
              image: dpage/pgadmin4:latest
              environment:
                - PGADMIN_DEFAULT_EMAIL=admin@example.com
                - PGADMIN_DEFAULT_PASSWORD=admin
              ports:
                - "8080:80"
              depends_on:
                - database
              networks:
                - app-network
          
          networks:
            app-network:
              driver: bridge
          
          volumes:
            postgres_data:
          EOF
          
          # Запускаем новые контейнеры
          docker-compose -f docker-compose.prod.yml up -d
          
          # Инициализируем базу данных (если нужно)
          sleep 10
          docker-compose -f docker-compose.prod.yml exec -T database psql -U postgres -d films -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";" || true
          
          # Проверяем статус
          docker-compose -f docker-compose.prod.yml ps 