name: Deploy to Server

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches: [review-2]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          # Останавливаем старые контейнеры
          docker-compose down || true
          
          # Удаляем старые образы
          docker image prune -f
          
          # Логинимся в GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Создаем docker-compose.prod.yml для продакшена
          cat > docker-compose.prod.yml << 'EOF'
          version: '3.8'
          
          services:
            frontend:
              image: ghcr.io/${{ github.repository }}-frontend:review-2-frontend
              ports:
                - "80:80"
              depends_on:
                - backend
              networks:
                - app-network
          
            backend:
              image: ghcr.io/${{ github.repository }}:review-2
              environment:
                - DATABASE_DRIVER=postgres
                - DATABASE_HOST=database
                - DATABASE_PORT=5432
                - DATABASE_USERNAME=postgres
                - DATABASE_PASSWORD=${{ secrets.DB_PASSWORD }}
                - DATABASE_NAME=films
                - DATABASE_LOGGING=true
                - LOGGER_TYPE=json
              depends_on:
                - database
              networks:
                - app-network
          
            database:
              image: postgres:15-alpine
              environment:
                - POSTGRES_DB=films
                - POSTGRES_USER=postgres
                - POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}
              volumes:
                - postgres_data:/var/lib/postgresql/data
              networks:
                - app-network
          
            pgadmin:
              image: dpage/pgadmin4:latest
              environment:
                - PGADMIN_DEFAULT_EMAIL=admin@example.com
                - PGADMIN_DEFAULT_PASSWORD=admin
              ports:
                - "8080:80"
              depends_on:
                - database
              networks:
                - app-network
          
          networks:
            app-network:
              driver: bridge
          
          volumes:
            postgres_data:
          EOF
          
          # Запускаем новые контейнеры
          docker-compose -f docker-compose.prod.yml up -d
          
          # Инициализируем базу данных (если нужно)
          sleep 10
          docker-compose -f docker-compose.prod.yml exec -T database psql -U postgres -d films -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";" || true
          
          # Проверяем статус
          docker-compose -f docker-compose.prod.yml ps 